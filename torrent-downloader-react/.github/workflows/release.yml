name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: './backend/requirements.txt'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './package-lock.json'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libtorrent-rasterbar-dev
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          cd backend
          pip install -r requirements.txt
      
      - name: Install Node.js dependencies
        run: npm ci
      
      - name: Build package
        run: |
          cd backend
          python build.py
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            backend/dist/*.whl
            backend/dist/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd backend
          twine upload dist/*

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          cd backend
          pip install -r requirements.txt
          npm ci
      
      - name: Build Windows executable
        run: |
          cd backend
          python build.py
          pyinstaller --onefile --windowed --icon=torrent_downloader/static/favicon.ico --name=torrent-downloader torrent_downloader/server.py
      
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-executable
          path: backend/dist/torrent-downloader.exe
      
      - name: Update Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: backend/dist/torrent-downloader.exe

  build-macos:
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          brew install libtorrent-rasterbar
          python -m pip install --upgrade pip
          pip install pyinstaller
          cd backend
          pip install -r requirements.txt
          npm ci
      
      - name: Build macOS application
        run: |
          cd backend
          python build.py
          pyinstaller --onefile --windowed --icon=torrent_downloader/static/favicon.icns --name=torrent-downloader torrent_downloader/server.py
      
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-executable
          path: backend/dist/torrent-downloader
      
      - name: Update Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: backend/dist/torrent-downloader 