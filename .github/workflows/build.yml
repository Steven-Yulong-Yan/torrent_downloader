name: Build Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        echo "::group::Upgrading pip and installing dependencies"
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install python-libtorrent>=2.0.0
        pip install pyinstaller
        echo "::endgroup::"
        
        echo "::group::Verifying Python installation"
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import platform; print(f'Platform: {platform.platform()}')"
        pip list
        echo "::endgroup::"
        
        echo "::group::Verifying critical dependencies"
        python -c "import libtorrent; print(f'libtorrent version: {libtorrent.__version__}')"
        python -c "import tkinter; print('Tkinter is available')"
        echo "::endgroup::"
        
    - name: Install GTK and Cairo dependencies
      run: |
        echo "::group::Installing GTK and Cairo dependencies"
        pip install --upgrade pip wheel setuptools
        pip install pycairo
        pip install PyGObject
        pip install cairosvg pillow
        echo "::endgroup::"
        
    - name: Generate icons
      run: |
        echo "::group::Generating icons"
        # Fallback to direct PNG conversion if SVG conversion fails
        python -c "from PIL import Image; import cairosvg; cairosvg.svg2png(url='icon.svg', write_to='icon_256.png', output_width=256, output_height=256); img = Image.open('icon_256.png'); img.save('icon.ico', format='ICO', sizes=[(16, 16), (32, 32), (48, 48), (64, 64), (128, 128), (256, 256)])"
        if (-not (Test-Path "icon.ico")) {
          echo "::error::icon.ico was not generated"
          exit 1
        }
        echo "::endgroup::"
      
    - name: Build Windows executable
      run: |
        echo "::group::Starting Windows build"
        pyinstaller torrent_downloader_win.spec
        echo "Build completed. Checking dist directory..."
        dir dist
        if (-not (Test-Path "dist/TorrentDownloader/TorrentDownloader.exe")) {
          echo "::error::TorrentDownloader.exe was not generated"
          exit 1
        }
        echo "::endgroup::"
      
    - name: Create Windows ZIP
      run: |
        cd dist
        echo "::group::Creating ZIP archive"
        Compress-Archive -Path TorrentDownloader -DestinationPath TorrentDownloader-Windows.zip
        $zipFile = Get-Item TorrentDownloader-Windows.zip
        echo "ZIP file size: $($zipFile.Length) bytes"
        if ($zipFile.Length -lt 1000000) {
          echo "::warning::ZIP file seems unusually small"
        }
        echo "::endgroup::"
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: TorrentDownloader-Windows
        path: dist/TorrentDownloader-Windows.zip
        compression-level: 0

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        echo "::group::Installing system dependencies"
        brew update
        brew install boost-python3
        brew install libtorrent-rasterbar
        brew install cairo
        echo "::endgroup::"
        
        echo "::group::Installing Python dependencies"
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
        echo "Setting up libtorrent paths"
        LIBTORRENT_PATH=$(brew --prefix libtorrent-rasterbar)
        BOOST_PATH=$(brew --prefix boost-python3)
        PYTHON_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        echo "LIBTORRENT_PATH=$LIBTORRENT_PATH"
        echo "BOOST_PATH=$BOOST_PATH"
        echo "PYTHON_VERSION=$PYTHON_VERSION"
        
        # Try different possible paths for libtorrent
        POSSIBLE_PATHS=(
          "$LIBTORRENT_PATH/lib/python$PYTHON_VERSION/site-packages"
          "$LIBTORRENT_PATH/lib/python3/dist-packages"
          "$LIBTORRENT_PATH/lib/python$PYTHON_VERSION/dist-packages"
        )
        
        FOUND_LIBTORRENT=0
        for PATH_TO_CHECK in "${POSSIBLE_PATHS[@]}"; do
          echo "Checking $PATH_TO_CHECK"
          if [ -f "$PATH_TO_CHECK/libtorrent.so" ]; then
            echo "Found libtorrent.so at $PATH_TO_CHECK"
            mkdir -p $(python -c "import site; print(site.getsitepackages()[0])")
            ln -sf "$PATH_TO_CHECK/libtorrent.so" $(python -c "import site; print(site.getsitepackages()[0])")/
            FOUND_LIBTORRENT=1
            break
          fi
        done
        
        if [ $FOUND_LIBTORRENT -eq 0 ]; then
          echo "Could not find libtorrent.so, attempting to install via pip"
          CFLAGS="-I$BOOST_PATH/include -I$LIBTORRENT_PATH/include" \
          LDFLAGS="-L$BOOST_PATH/lib -L$LIBTORRENT_PATH/lib" \
          pip install python-libtorrent
        fi
        echo "::endgroup::"
        
        echo "::group::Verifying Python installation"
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import platform; print(f'Platform: {platform.platform()}')"
        pip list
        echo "::endgroup::"
        
        echo "::group::Verifying critical dependencies"
        python -c "import libtorrent; print(f'libtorrent version: {libtorrent.__version__}')"
        python -c "import tkinter; print('Tkinter is available')"
        echo "::endgroup::"
        
    - name: Generate icons
      run: |
        echo "::group::Installing CairoSVG dependencies"
        pip install cairosvg pillow
        echo "::endgroup::"
        
        echo "::group::Generating icons"
        python convert_icons.py
        if [ ! -f "icon.icns" ]; then
          echo "::error::icon.icns was not generated"
          exit 1
        fi
        ls -l icon.*
        echo "::endgroup::"
      
    - name: Build macOS application
      run: |
        echo "::group::Starting macOS build"
        pyinstaller torrent_downloader.spec
        echo "Build completed. Checking dist directory..."
        ls -la dist
        if [ ! -d "dist/TorrentDownloader.app" ]; then
          echo "::error::TorrentDownloader.app was not generated"
          exit 1
        fi
        echo "::endgroup::"
      
    - name: Create macOS ZIP
      run: |
        cd dist
        echo "::group::Creating ZIP archive"
        zip -r TorrentDownloader-macOS.zip TorrentDownloader.app
        ZIP_SIZE=$(stat -f%z TorrentDownloader-macOS.zip)
        echo "ZIP file size: $ZIP_SIZE bytes"
        if [ "$ZIP_SIZE" -lt 1000000 ]; then
          echo "::warning::ZIP file seems unusually small"
        fi
        ls -lh TorrentDownloader-macOS.zip
        echo "::endgroup::"
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: TorrentDownloader-macOS
        path: dist/TorrentDownloader-macOS.zip
        compression-level: 0 