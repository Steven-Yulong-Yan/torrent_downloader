name: Build Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-cairo
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-python-cairo
          mingw-w64-x86_64-pkg-config
        
    - name: Install dependencies
      run: |
        echo "::group::Upgrading pip and installing dependencies"
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install python-libtorrent>=2.0.0
        pip install pyinstaller
        echo "::endgroup::"
        
        echo "::group::Verifying Python installation"
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import platform; print(f'Platform: {platform.platform()}')"
        pip list
        echo "::endgroup::"
        
        echo "::group::Verifying critical dependencies"
        python -c "import libtorrent; print(f'libtorrent version: {libtorrent.__version__}')"
        python -c "import tkinter; print('Tkinter is available')"
        echo "::endgroup::"
        
    - name: Install Python dependencies
      run: |
        echo "::group::Installing Python dependencies"
        pip install --upgrade pip wheel setuptools
        
        # Add MSYS2 bin directory to PATH for DLLs
        echo "${{ github.workspace }}/msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        $env:PATH = "${{ github.workspace }}/msys64/mingw64/bin;$env:PATH"
        
        # Set PKG_CONFIG_PATH for Cairo
        $env:PKG_CONFIG_PATH = "${{ github.workspace }}/msys64/mingw64/lib/pkgconfig"
        
        pip install pycairo
        pip install PyGObject
        pip install cairosvg pillow
        echo "::endgroup::"
        
    - name: Generate icons
      run: |
        echo "::group::Generating icons"
        # Add MSYS2 bin to PATH for the Cairo DLLs
        $env:PATH = "${{ github.workspace }}/msys64/mingw64/bin;$env:PATH"
        
        # Create Python script and write it using Set-Content
        Set-Content -Path generate_icons.py -Value @'
try:
    import cairosvg
    import os
    from PIL import Image
    print("Attempting to convert SVG using CairoSVG...")
    cairosvg.svg2png(url="icon.svg", write_to="icon_256.png", output_width=256, output_height=256)
except Exception as e:
    print("CairoSVG failed: " + str(e))
    print("Falling back to PIL for direct PNG to ICO conversion...")
    from PIL import Image
    img = Image.new("RGB", (256, 256), "#2196F3")
    from PIL import ImageDraw
    draw = ImageDraw.Draw(img)
    draw.rectangle((120, 60, 136, 160), fill="white")
    points = [(80, 140), (128, 196), (176, 140)]
    draw.polygon(points, fill="white")
    img.save("icon_256.png")
img = Image.open("icon_256.png")
img.save("icon.ico", format="ICO", sizes=[(16, 16), (32, 32), (48, 48), (64, 64), (128, 128), (256, 256)])
print("Icon generation completed successfully")
'@ -Encoding UTF8
        
        # Execute the script
        python generate_icons.py
        
        if (-not (Test-Path "icon.ico")) {
          echo "::error::icon.ico was not generated"
          exit 1
        }
        echo "::endgroup::"
      
    - name: Build Windows executable
      run: |
        echo "::group::Starting Windows build"
        pyinstaller torrent_downloader_win.spec
        echo "Build completed. Checking dist directory..."
        dir dist
        if (-not (Test-Path "dist/TorrentDownloader/TorrentDownloader.exe")) {
          echo "::error::TorrentDownloader.exe was not generated"
          exit 1
        }
        echo "::endgroup::"
      
    - name: Create Windows ZIP
      run: |
        cd dist
        echo "::group::Creating ZIP archive"
        Compress-Archive -Path TorrentDownloader -DestinationPath TorrentDownloader-Windows.zip
        $zipFile = Get-Item TorrentDownloader-Windows.zip
        echo "ZIP file size: $($zipFile.Length) bytes"
        if ($zipFile.Length -lt 1000000) {
          echo "::warning::ZIP file seems unusually small"
        }
        echo "::endgroup::"
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: TorrentDownloader-Windows
        path: dist/TorrentDownloader-Windows.zip
        compression-level: 0

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        echo "::group::Installing system dependencies"
        brew update
        brew uninstall --ignore-dependencies boost-python3 || true
        brew uninstall --ignore-dependencies libtorrent-rasterbar || true
        brew install boost
        brew install boost-python3
        brew install libtorrent-rasterbar
        brew install cairo
        echo "::endgroup::"
        
        echo "::group::Installing Python dependencies"
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
        echo "Setting up libtorrent paths"
        LIBTORRENT_PATH=$(brew --prefix libtorrent-rasterbar)
        BOOST_PATH=$(brew --prefix boost)
        PYTHON_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        echo "LIBTORRENT_PATH=$LIBTORRENT_PATH"
        echo "BOOST_PATH=$BOOST_PATH"
        echo "PYTHON_VERSION=$PYTHON_VERSION"
        
        # Try to find the libtorrent Python module
        echo "Checking for libtorrent Python module..."
        SITE_PACKAGES=$(python -c "import site; print(site.getsitepackages()[0])")
        echo "Site packages directory: $SITE_PACKAGES"
        
        # Create symbolic links for the libraries
        echo "Creating symbolic links for libraries..."
        for lib in $LIBTORRENT_PATH/lib/lib*.dylib; do
          echo "Linking $lib"
          ln -sf "$lib" "$SITE_PACKAGES/"
        done
        
        # Install libtorrent from source if needed
        if ! python -c "import libtorrent" 2>/dev/null; then
          echo "Building libtorrent Python bindings from source..."
          brew install cmake ninja boost-build
          git clone --depth 1 --branch v2.0.9 https://github.com/arvidn/libtorrent.git
          cd libtorrent
          
          # Set environment variables for the build
          export BOOST_ROOT=$BOOST_PATH
          export BOOST_LIBRARYDIR=$BOOST_PATH/lib
          export BOOST_INCLUDEDIR=$BOOST_PATH/include
          export CXXFLAGS="-I$BOOST_PATH/include -std=c++17"
          export LDFLAGS="-L$BOOST_PATH/lib"
          
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=$SITE_PACKAGES \
                -DCMAKE_PREFIX_PATH="$BOOST_PATH" \
                -DBoost_NO_BOOST_CMAKE=OFF \
                -DBoost_NO_SYSTEM_PATHS=OFF \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
                -Dpython-bindings=ON \
                -Dboost-python-module-name="python${PYTHON_VERSION}" \
                -Dpython-package-dir=$SITE_PACKAGES \
                -DPython_EXECUTABLE=$(which python) \
                -B build
          
          cmake --build build --parallel
          cmake --install build
          cd ..
        fi
        echo "::endgroup::"
        
        echo "::group::Verifying Python installation"
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import platform; print(f'Platform: {platform.platform()}')"
        pip list
        echo "::endgroup::"
        
        echo "::group::Verifying critical dependencies"
        python -c "import libtorrent; print(f'libtorrent version: {libtorrent.__version__}')"
        python -c "import tkinter; print('Tkinter is available')"
        echo "::endgroup::"
        
    - name: Generate icons
      run: |
        echo "::group::Installing CairoSVG dependencies"
        pip install cairosvg pillow
        echo "::endgroup::"
        
        echo "::group::Generating icons"
        python convert_icons.py
        if [ ! -f "icon.icns" ]; then
          echo "::error::icon.icns was not generated"
          exit 1
        fi
        ls -l icon.*
        echo "::endgroup::"
      
    - name: Build macOS application
      run: |
        echo "::group::Starting macOS build"
        pyinstaller torrent_downloader.spec
        echo "Build completed. Checking dist directory..."
        ls -la dist
        if [ ! -d "dist/TorrentDownloader.app" ]; then
          echo "::error::TorrentDownloader.app was not generated"
          exit 1
        fi
        echo "::endgroup::"
      
    - name: Create macOS ZIP
      run: |
        cd dist
        echo "::group::Creating ZIP archive"
        zip -r TorrentDownloader-macOS.zip TorrentDownloader.app
        ZIP_SIZE=$(stat -f%z TorrentDownloader-macOS.zip)
        echo "ZIP file size: $ZIP_SIZE bytes"
        if [ "$ZIP_SIZE" -lt 1000000 ]; then
          echo "::warning::ZIP file seems unusually small"
        fi
        ls -lh TorrentDownloader-macOS.zip
        echo "::endgroup::"
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: TorrentDownloader-macOS
        path: dist/TorrentDownloader-macOS.zip
        compression-level: 0 